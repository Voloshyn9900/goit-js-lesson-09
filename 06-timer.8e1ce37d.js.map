{"mappings":"AAEA,MAAMA,EAAO,CACXC,SAAUC,SAASC,cAAc,6BACjCC,QAASF,SAASC,cAAc,4BAChCE,UAAWH,SAASC,cAAc,kBA4CpCH,EAAKC,SAASK,iBAAiB,SAAS,KACtCC,EAAMC,OAAO,IAEfR,EAAKI,QAAQE,iBAAiB,SAAS,KACrCC,EAAME,MAAM,IAId,MAAMF,EAAQ,IAjDd,MASEG,OACE,MAAMC,EAAOC,EAAkB,GAC/BC,KAAKC,OAAOH,E,CAGdH,QACE,GAAIK,KAAKE,SACP,OAEF,MAAMC,EAAYC,KAAKC,MACvBL,KAAKE,UAAW,EAEhBF,KAAKM,WAAaC,aAAY,KAC5B,MAGMT,EAAOC,EAHOK,KAAKC,MACOF,GAIhCH,KAAKC,OAAOH,EAAK,GAChB,I,CAGLF,OACEY,cAAcR,KAAKM,YACnBN,KAAKE,UAAW,EAChB,MAAMJ,EAAOC,EAAkB,GAC/BU,QAAQC,IAAIZ,GACZE,KAAKC,OAAOH,E,CAnCda,aAAYV,OAAEA,IACZD,KAAKM,WAAa,KAClBN,KAAKE,UAAW,EAChBF,KAAKC,OAASA,EAEdD,KAAKH,M,GA2Ce,CAAEI,OAG1B,UAAyBW,MAAEA,EAAKC,KAAEA,EAAIC,KAAEA,IACtC3B,EAAKK,UAAUuB,YAAc,GAAGH,KAASC,KAAQC,G,IAGnD,SAASf,EAAkBD,GAMzB,MAAO,C,MALOkB,EACZC,KAAKC,MAAMpB,EAAS,MAAyB,O,KAElCkB,EAAIC,KAAKC,MAAMpB,EAAS,KAAoB,M,KAC5CkB,EAAIC,KAAKC,MAAMpB,EAAS,IAAc,M,CAIrD,SAASkB,EAAIG,GACX,OAAOC,OAAOD,GAAOE,SAAS,EAAG,I","sources":["src/js/06-timer.js"],"sourcesContent":["import '../css/common.css';\n\nconst refs = {\n  startBtn: document.querySelector('button[data-action-start]'),\n  stopBtn: document.querySelector('button[data-action-stop]'),\n  clockface: document.querySelector('.js-clockface'),\n};\n\nclass Timer {\n  constructor({ onTick }) {\n    this.intervalId = null;\n    this.isActive = false;\n    this.onTick = onTick;\n\n    this.init()\n  }\n\n  init() {\n    const time = getTimeComponents(0);\n    this.onTick(time);\n  }\n\n  start() {\n    if (this.isActive) {\n      return;\n    }\n    const startTime = Date.now();\n    this.isActive = true;\n\n    this.intervalId = setInterval(() => {\n      const currentTime = Date.now();\n      const deltaTime = currentTime - startTime;\n      // console.log(deltaTime);\n      const time = getTimeComponents(deltaTime);\n      // console.log(this.onTick);\n      this.onTick(time);\n    }, 1000);\n  }\n\n  stop() {\n    clearInterval(this.intervalId);\n    this.isActive = false;\n    const time = getTimeComponents(0);\n    console.log(time);\n    this.onTick(time);\n  }\n};\n\n\nrefs.startBtn.addEventListener('click', () => {\n  timer.start();\n});\nrefs.stopBtn.addEventListener('click', () => {\n  timer.stop();\n});\n\n\nconst timer = new Timer({ onTick: updateClockface });\n\n\nfunction updateClockface({ hours, mins, secs }) {\n  refs.clockface.textContent = `${hours}:${mins}:${secs}`;\n}\n\nfunction getTimeComponents(time) {\n  const hours = pad(\n    Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n  );\n  const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n  const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n  return { hours, mins, secs };\n}\n\nfunction pad(value) {\n  return String(value).padStart(2, '0');\n}\n\n\n// const timer = {\n//   intervalId: null,\n//   isActive: false,\n\n//   start() {\n//     if (this.isActive) {\n//       return;\n//     }\n//     const startTime = Date.now();\n//     this.isActive = true;\n\n//     this.intervalId = setInterval(() => {\n//       const currentTime = Date.now();\n//       const deltaTime = currentTime - startTime;\n//       const time = getTimeComponents(deltaTime);\n\n//       updateClockface(time);\n//     }, 1000);\n//   },\n//   stop() {\n//     clearInterval(this.intervalId);\n//     this.isActive = false;\n//   },\n// };\n\n// /*\n//  * Принимает число, приводит к строке и добавляет в начало 0 если число меньше 2-х знаков\n//  */\n// function pad(value) {\n//   return String(value).padStart(2, '0');\n// }\n\n// /*\n//  * - Принимает время в миллисекундах\n//  * - Высчитывает сколько в них вмещается часов/минут/секунд\n//  * - Возвращает обьект со свойствами hours, mins, secs\n//  * - Адская копипаста со стека 💩\n//  */\n// function getTimeComponents(time) {\n//   const hours = pad(\n//     Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n//   );\n//   const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n//   const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n//   return { hours, mins, secs };\n// }\n\n// function updateClockface({ hours, mins, secs }) {\n//   refs.clockface.textContent = `${hours}:${mins}:${secs}`;\n// }\n\n// const timer = {\n//   start() {\n//     const startTime = Date.now();\n\n//     setInterval(() => {\n//       console.log('startTime', startTime);\n//       console.log(\"123\");\n//     },1000)\n\n//   },\n\n// };\n"],"names":["$4bf6ce8950836956$var$refs","startBtn","document","querySelector","stopBtn","clockface","addEventListener","$4bf6ce8950836956$var$timer","start","stop","init","time","$4bf6ce8950836956$var$getTimeComponents","this","onTick","isActive","startTime","Date","now","intervalId","setInterval","clearInterval","console","log","constructor","hours","mins","secs","textContent","$4bf6ce8950836956$var$pad","Math","floor","value","String","padStart"],"version":3,"file":"06-timer.8e1ce37d.js.map"}